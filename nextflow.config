/*
 * -------------------------------------------------
 *  nf-core/nanoseq Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

// Global default params, used in configs
params {

  // Options: Mandatory
  protocol = false

  // Options: Demultiplexing
  input_path = false
  flowcell = false
  kit = false
  barcode_kit = false
  guppy_config = false
  guppy_model = false
  guppy_gpu = false
  guppy_gpu_runners = 6
  guppy_cpu_threads = 1
  gpu_device = 'auto'
  gpu_cluster_options = false
  qcat_min_score = 60
  qcat_detect_middle = false
  skip_basecalling = false
  skip_demultiplexing = false

  // Options: Alignment
  aligner = 'minimap2'
  stranded = false
  save_align_intermeds = false
  skip_alignment = false

  // Options: Visualisation
  skip_bigbed = false
  skip_bigwig = false

  // Options: QC
  skip_qc = false
  skip_pycoqc = false
  skip_nanoplot = false
  skip_fastqc = false
  skip_multiqc = false

  // Options: Config
  multiqc_config = false

  // Options: Custom config
  custom_config_version = 'master'
  custom_config_base = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
  config_profile_description = false
  config_profile_contact = false
  config_profile_url = false

  // Options: Other
  help = false
  outdir = './results'
  igenomes_base = 's3://ngi-igenomes/igenomes/'
  igenomes_ignore = false
  max_multiqc_email_size = 25.MB
  tracedir = "${params.outdir}/pipeline_info"
  email = false
  email_on_fail = false
  plaintext_email = false
  monochrome_logs = false
  name = false
  hostnames = false
  clusterOptions = false

  // Defaults only, expecting to be overwritten
  max_memory = 128.GB
  max_cpus = 16
  max_time = 240.h

}

// Container slug. Stable releases should specify release tag!
// Developmental code should specify :dev
process.container = 'nfcore/nanoseq:1.0.0'

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
try {
  includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
  System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

profiles {
  debug         { process.beforeScript = 'echo $HOSTNAME' }
  docker        {
    docker.enabled = true
    // Avoid this error:
    //   WARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.
    // Testing this in nf-core after discussion here https://github.com/nf-core/tools/pull/351
    // once this is established and works well, nextflow might implement this behavior as new default.
    docker.runOptions = '-u \$(id -u):\$(id -g)'
  }
  singularity    {
    singularity.enabled = true
    singularity.autoMounts = true
  }
  podman        {
    podman.enabled = true
    podman.temp = 'auto'
  }
  test           { includeConfig 'conf/test.config' }
  test_bc_nodx   { includeConfig 'conf/test_bc_nodx.config' }
  test_nobc_dx   { includeConfig 'conf/test_nobc_dx.config' }
  test_nobc_nodx { includeConfig 'conf/test_nobc_nodx.config' }
}

// Load igenomes.config if required
if (!params.igenomes_ignore) {
  includeConfig 'conf/igenomes.config'
}

// Export this variable to prevent local Python libraries from conflicting with those in the container
env {
  PYTHONNOUSERSITE = 1
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag.svg"
}

manifest {
  name = 'nf-core/nanoseq'
  author = 'Chelsea Sawyer'
  homePage = 'https://github.com/nf-core/nanoseq'
  description = 'A pipeline to demultiplex, QC and map Nanopore data'
  mainScript = 'main.nf'
  nextflowVersion = '>=19.10.0'
  version = '1.0.0'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
